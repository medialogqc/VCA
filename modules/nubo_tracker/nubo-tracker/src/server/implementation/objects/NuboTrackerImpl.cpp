/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include "MediaPipelineImpl.hpp"
#include <NuboTrackerImplFactory.hpp>
#include "NuboTrackerImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

#define GST_CAT_DEFAULT kurento_nubo_tracker_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoNuboTrackerImpl"

#define SET_THRESHOLD "set_threshold"
#define SET_MIN_AREA "set_min_area"
#define SET_MAX_AREA "set_max_area"
#define SET_DISTANCE "set_distance"
#define SET_VISUAL_MODE "set_visual_mode"

namespace kurento
{
namespace module
{
namespace nubotracker
{

  NuboTrackerImpl::NuboTrackerImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline)  :  FilterImpl (config, std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline)) 
{
  	g_object_set (element, "filter-factory", "nubotracker", NULL);

	g_object_get (G_OBJECT (element), "filter", &nubo_tracker, NULL);

	if (NULL == nubo_tracker) {
	  throw KurentoException (MEDIA_OBJECT_NOT_AVAILABLE,
				  "Media Object not available");
	}
 
	g_object_unref(nubo_tracker);
}


void NuboTrackerImpl::setThreshold(int threshold)
{
  g_object_set(G_OBJECT(nubo_tracker),SET_THRESHOLD,threshold,NULL);
}

void NuboTrackerImpl::setMinArea(int minArea)
{
g_object_set(G_OBJECT(nubo_tracker),SET_MIN_AREA,minArea,NULL);
}


void NuboTrackerImpl::setMaxArea(float maxArea)
{
long m_area=maxArea;

g_object_set(G_OBJECT(nubo_tracker),SET_MAX_AREA,m_area,NULL);
}

void NuboTrackerImpl::setDistance(int distance)
{ 
  g_object_set(G_OBJECT(nubo_tracker),SET_DISTANCE,distance,NULL);
}

void NuboTrackerImpl::setVisualMode(int mode){
  g_object_set(G_OBJECT(nubo_tracker),SET_VISUAL_MODE,mode,NULL);
}

MediaObjectImpl *
NuboTrackerImplFactory::createObject (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) const
{

  return new NuboTrackerImpl (config, mediaPipeline);
}

NuboTrackerImpl::StaticConstructor NuboTrackerImpl::staticConstructor;

NuboTrackerImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}

} /* nubotracker */
} /* module */
} /* kurento */
