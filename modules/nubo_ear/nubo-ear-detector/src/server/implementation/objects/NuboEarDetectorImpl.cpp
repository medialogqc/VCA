/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include "MediaPipelineImpl.hpp"
#include <NuboEarDetectorImplFactory.hpp>
#include "NuboEarDetectorImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

#define GST_CAT_DEFAULT kurento_nubo_ear_detector_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoNuboEarDetectorImpl"

#define VIEW_EARS "view-ears"
#define DETECT_BY_EVENT "detect-event"
#define SEND_META_DATA "send-meta-data"
#define FACTOR_SCALE "multi-scale-factor"
#define X_EVERY_4_FRAMES "process-x-every-4-frames"
#define WIDTH_TO_PROCESS "width-to-process"

namespace kurento
{
  namespace module
  {
    namespace nuboeardetector
    {

      NuboEarDetectorImpl::NuboEarDetectorImpl (const boost::property_tree::ptree &config,
						std::shared_ptr<MediaPipeline> mediaPipeline):FilterImpl 
						(config,
						 std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline))
      {
	g_object_set (element, "filter-factory", "nuboeardetector", NULL);
  
	g_object_get (G_OBJECT (element), "filter", &nubo_ear, NULL);
  
	if (NULL == nubo_ear) {
	  throw KurentoException (MEDIA_OBJECT_NOT_AVAILABLE,
				  "Media Object not available");
	}
  
	g_object_unref(nubo_ear); 
      }

      void NuboEarDetectorImpl::showEars (int viewEars)
      {
	g_object_set(G_OBJECT (nubo_ear), VIEW_EARS, viewEars, NULL);
      }


      void NuboEarDetectorImpl::detectByEvent(int event)
      {
  
	g_object_set(G_OBJECT (nubo_ear), DETECT_BY_EVENT, event, NULL);
  
      }
  
      void NuboEarDetectorImpl::sendMetaData(int metaData)
      {
	g_object_set(G_OBJECT (nubo_ear),SEND_META_DATA , metaData, NULL);
      }

      
      void NuboEarDetectorImpl::multiScaleFactor(int scaleFactor)
      {
	g_object_set(G_OBJECT (nubo_ear),FACTOR_SCALE , scaleFactor, NULL);
      }
      
      void NuboEarDetectorImpl::processXevery4Frames(int xper4)
      {
	g_object_set(G_OBJECT (nubo_ear),X_EVERY_4_FRAMES , xper4, NULL);
      }
      
      void NuboEarDetectorImpl::widthToProcess(int width)
      {
 	g_object_set(G_OBJECT (nubo_ear),WIDTH_TO_PROCESS , width, NULL);
      }


      MediaObjectImpl *
      NuboEarDetectorImplFactory::createObject (const boost::property_tree::ptree &config,
						std::shared_ptr<MediaPipeline> mediaPipeline) const
      {
	return new NuboEarDetectorImpl (config, mediaPipeline);
      }


      NuboEarDetectorImpl::StaticConstructor NuboEarDetectorImpl::staticConstructor;



      NuboEarDetectorImpl::StaticConstructor::StaticConstructor()
      {
	GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
				 GST_DEFAULT_NAME);
      }

    } /* nuboeardetector */
  } /* module */
} /* kurento */
