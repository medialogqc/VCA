/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include "MediaPipelineImpl.hpp"
#include <NuboMouthDetectorImplFactory.hpp>
#include "NuboMouthDetectorImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

#define GST_CAT_DEFAULT kurento_nubo_mouth_detector_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoNuboMouthDetectorImpl"

#define VIEW_MOUTHS "view-mouths"
#define DETECT_BY_EVENT "detect-event"
#define SEND_META_DATA "send-meta-data"
#define FACTOR_SCALE "multi-scale-factor"
#define X_EVERY_4_FRAMES "process-x-every-4-frames"
#define WIDTH_TO_PROCESS "width-to-process"

namespace kurento
{
  namespace module
  {
    namespace nubomouthdetector
    {

      NuboMouthDetectorImpl::NuboMouthDetectorImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline)  : FilterImpl (config, std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline)) 
      {
  
	g_object_set (element, "filter-factory", "nubomouthdetector", NULL);

	g_object_get (G_OBJECT (element), "filter", &nubo_mouth, NULL);

	if (NULL == nubo_mouth) {
	  throw KurentoException (MEDIA_OBJECT_NOT_AVAILABLE,
				  "Media Object not available");
	}

	g_object_unref(nubo_mouth);

      }

      void NuboMouthDetectorImpl::showMouths(int viewMouths)
      {
	g_object_set(G_OBJECT (nubo_mouth), VIEW_MOUTHS, viewMouths, NULL);
      }

      void NuboMouthDetectorImpl::detectByEvent(int event)
      {
  
	g_object_set(G_OBJECT (nubo_mouth), DETECT_BY_EVENT, event, NULL);
  
      }
  
      void NuboMouthDetectorImpl::sendMetaData(int metaData)
      {
	g_object_set(G_OBJECT (nubo_mouth),SEND_META_DATA , metaData, NULL);
      }

      void NuboMouthDetectorImpl::multiScaleFactor(int scaleFactor)
      {
	printf("NuboMouthDetectorImpl.cpp receive scale Factor %d \n",scaleFactor);
	g_object_set(G_OBJECT (nubo_mouth),FACTOR_SCALE , scaleFactor, NULL);
      }

      void NuboMouthDetectorImpl::processXevery4Frames(int xper4)
      {
	printf("NuboMouthDetectorImpl.cpp receive fps  %d \n",xper4);
	g_object_set(G_OBJECT (nubo_mouth),X_EVERY_4_FRAMES , xper4, NULL);
      }

      void NuboMouthDetectorImpl::widthToProcess(int width)
      {
	std::cout << "******************************************" << std::endl;
	std::cout << "NuboMouthDetectorImpl.cpp width " << width << std::endl; 
	g_object_set(G_OBJECT (nubo_mouth),WIDTH_TO_PROCESS , width, NULL);
      }
      MediaObjectImpl *
      NuboMouthDetectorImplFactory::createObject (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) const
      {

	return new NuboMouthDetectorImpl (config, mediaPipeline);
      }

      NuboMouthDetectorImpl::StaticConstructor NuboMouthDetectorImpl::staticConstructor;

      NuboMouthDetectorImpl::StaticConstructor::StaticConstructor()
      {
	GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
				 GST_DEFAULT_NAME);
      }

    } /* nubomouthdetector */
  } /* module */
} /* kurento */
