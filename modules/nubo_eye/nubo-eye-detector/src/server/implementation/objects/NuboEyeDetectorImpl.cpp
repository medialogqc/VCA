
/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include "MediaPipelineImpl.hpp"
#include <NuboEyeDetectorImplFactory.hpp>
#include "NuboEyeDetectorImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

#define GST_CAT_DEFAULT kurento_nubo_eye_detector_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoNuboEyeDetectorImpl"

#define VIEW_EYES "view-eyes"
#define DETECT_BY_EVENT "detect-event"
#define SEND_META_DATA "send-meta-data"
#define FACTOR_SCALE "multi-scale-factor"
#define X_EVERY_4_FRAMES "process-x-every-4-frames"
#define WIDTH_TO_PROCESS "width-to-process"

namespace kurento
{
  namespace module
  {
    namespace nuboeyedetector
    {

      NuboEyeDetectorImpl::NuboEyeDetectorImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline)  : FilterImpl (config, std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline)) 
      {
 
	g_object_set (element, "filter-factory", "nuboeyedetector", NULL);
  
	g_object_get (G_OBJECT (element), "filter", &nubo_eye, NULL);

	if (NULL == nubo_eye) {
	  throw KurentoException (MEDIA_OBJECT_NOT_AVAILABLE,
				  "Media Object not available");
	}

	g_object_unref(nubo_eye); 
      }

      void NuboEyeDetectorImpl::showEyes (int viewEyes)
      {
	g_object_set(G_OBJECT (nubo_eye), VIEW_EYES, viewEyes, NULL);
      }


      void NuboEyeDetectorImpl::detectByEvent(int event)
      {
  
	g_object_set(G_OBJECT (nubo_eye), DETECT_BY_EVENT, event, NULL);
  
      }
  
      void NuboEyeDetectorImpl::sendMetaData(int metaData)
      {
	g_object_set(G_OBJECT (nubo_eye),SEND_META_DATA , metaData, NULL);
      }

      void NuboEyeDetectorImpl::multiScaleFactor(int scaleFactor)
      {
	g_object_set(G_OBJECT (nubo_eye),FACTOR_SCALE , scaleFactor, NULL);
      }

      void NuboEyeDetectorImpl::processXevery4Frames(int xper4)
      {
	g_object_set(G_OBJECT (nubo_eye),X_EVERY_4_FRAMES , xper4, NULL);
      }

      void NuboEyeDetectorImpl::widthToProcess(int width)
      {
 	g_object_set(G_OBJECT (nubo_eye),WIDTH_TO_PROCESS , width, NULL);
      }


      MediaObjectImpl *
      NuboEyeDetectorImplFactory::createObject (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) const
      {
	return new NuboEyeDetectorImpl (config, mediaPipeline);
      }

      NuboEyeDetectorImpl::StaticConstructor NuboEyeDetectorImpl::staticConstructor;

      NuboEyeDetectorImpl::StaticConstructor::StaticConstructor()
      {
	GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
				 GST_DEFAULT_NAME);
      }

    } /* nuboeyedetector */
  } /* module */
} /* kurento */
